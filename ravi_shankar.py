# -*- coding: utf-8 -*-
"""Ravi shankar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PqGye990yP6bX2_FC92Wt1AbwDkwReBe
"""

class machine:
   def efficiency(self):
    return "efficiency not defined"
class motor(machine):
  def efficiency(self):
     return "motor efficiency:90%"
class generator (machine):
  def efficiency(self):
    return "generator efficiency:85%"
machine=[motor(),generator()]
for on in machine:
  print(on.efficiency())

def bending_stress(moment distance_from_neutral_axis,moment_*_inertia):
  return(moment*Distance_from_neutral_axis)/moment_of_inertia
M=2000
Y=0.1
i=8e-6
print("Bending stress:",bending_stress(M,Y,I)",pa")

import matplotlib.pyplot as plt
import numpy as np
panel_area=2.4
efficiency=0.20
sun_lighthours=5
power_output=panel_area*efficiency*sun_lighthours
print("power output:",power_output,"kw")



import matplotlib.pyplot as plt
import numpy as np
panel_area = 1.6
efficiency = 0.18
sunlight_hours = 6
hours = np.linspace(0, 24,59)
irradiance = np.piecewise(
    hours,
    [hours < 6, (hours >= 6) & (hours <= 18), hours > 18],
    [0, lambda h: 1000 * np.sin(np.pi * (h - 6) / 12), 0])
power_output = irradiance * panel_area * efficiency
energy_output = np.trapz(power_output, hours)
plt.figure(figsize=(7, 4))
plt.plot(hours, power_output, label='Power Output (W)', color='orange')
plt.fill_between(hours, power_output, alpha=0.3, color='orange')
plt.title(f"Solar Panel Power Output Simulation\nTotal Energy: {energy_output:.2f} Wh")
plt.xlabel('Hour of Day')
plt.ylabel('Power Output (W)')
plt.grid(True)
plt.legend()
plt.show()

import pandas as pd
df=pd.read_excel('data.xlsx')
df['stress']=df['force']/df['area']
df.to_excel('result.xlsx',index=False)

from google.colab import

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

import numpy as np
samples=np.random.normal(50,5,10000)
failure_rate=np.mean(samples>60)
print('failure rate:',failure_rate*100,"%")

import pandas as pd

# Make sure the file name 'data.xlsx' matches the name of the uploaded file
df = pd.read_excel('data.xlsx')
df['stress'] = df['force'] / df['area']
df.to_excel('result.xlsx', index=False)

import cmath
v=230;z=10+5j
I=v/z

import tkinter as tk
def calc():
  F=float(entry_force.get())
  A=float(entry_area.get())
root= tk.TK()
entry_force=tk.entry var(root)
entry_area=tk.string var(root)
return=tk.string()
tk.Button(root,text='calc',command=calc)
tk.label(root,text variable=result pack()).pack()
root.mainloop()

from multiprocessing import pool
def square(n):
  return n*n
  with pool(4) as p:
    print(p.map(square,[1,2,3,4,5]))

import json
with open('machine_configjson')as f:
  config=json.load(f)
print(config['motor']['rated_speed'])

def greet(name):
  """this function greets the user."""
  print(f"Hello,{name}!")
  greet("Alice")

original =[2,4,7]
copied = original.copy()

copied.append(9)
print("Original list:", original)
print("Copied list:", copied)

original = [10, 20, 30]
copied = original.copy()

copied.append(40)
print("Original list:", original)
print("Copied list:", copied)